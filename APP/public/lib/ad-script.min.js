const adsData = {
  ads: {
    Skyscraper_L: [
      {
        name: "Skyscraper_L",
        tag: "/49662453/TrendDK/Skyscraper_L",
        adformID: "1920807",
        fluid: false,
        mobileOnly: true,
        refreshedMap: false,
        size: [
          [160, 300],
          [300, 600],
          [300, 250],
        ],
      },
    ],
    Skyscraper_R: [
      {
        name: "Skyscraper_R",
        tag: "/49662453/TrendDK/Skyscraper_R",
        adformID: "1920808",
        fluid: false,
        mobileOnly: false,
        refreshedMap: false,
        size: [
          [160, 300],
          [300, 600],
          [300, 250],
        ],
      },
    ],
    Leaderboard_1: [
      {
        name: "Leaderboard_1",
        tag: "/49662453/TrendDK/Leaderboard_1",
        adformID: "1920798",
        fluid: false,
        mobileOnly: false,
        refreshedMap: false,
        size: [[930, 180]],
      },
    ],
    Leaderboard_2: [
      {
        name: "Leaderboard_2",
        tag: "/49662453/TrendDK/Leaderboard_2",
        adformID: "1920813",
        fluid: true,
        mobileOnly: false,
        refreshedMap: false,
        size: [
          [970, 570],
          [970, 540],
          [930, 180],
          [728, 90],
        ],
      },
    ],
    Leaderboard_3: [
      {
        name: "Leaderboard_3",
        tag: "/49662453/TrendDK/Leaderboard_3",
        adformID: "1936501",
        fluid: true,
        mobileOnly: false,
        refreshedMap: false,
        size: [[930, 180]],
      },
    ],
    Square_1: [
      {
        name: "Square_1",
        tag: "/49662453/TrendDK/Square_1",
        adformID: "1920799",
        fluid: false,
        mobileOnly: false,
        refreshedMap: false,
        size: [[300, 250]],
      },
    ],
    Square_2: [
      {
        name: "Square_2",
        tag: "/49662453/TrendDK/Square_2",
        adformID: "1936537",
        fluid: false,
        mobileOnly: false,
        refreshedMap: false,
        size: [[300, 250]],
      },
    ],
    Square_3: [
      {
        name: "Square_3",
        tag: "/49662453/TrendDK/Square_3",
        adformID: "1936883",
        fluid: false,
        mobileOnly: false,
        refreshedMap: false,
        size: [[300, 250]],
      },
    ],
    Square_Article_1: [
      {
        name: "Square_Article_1",
        tag: "/49662453/TrendDK/Square_Article_1",
        adformID: "1920809",
        fluid: false,
        mobileOnly: false,
        refreshedMap: false,
        size: [[300, 250]],
      },
    ],
    Square_Article_2: [
      {
        name: "Square_Article_2",
        tag: "/49662453/TrendDK/Square_Article_2",
        adformID: "1920810",
        fluid: false,
        mobileOnly: false,
        refreshedMap: false,
        size: [[300, 250]],
      },
    ],
    Square_Article_3: [
      {
        name: "Square_Article_3",
        tag: "/49662453/TrendDK/Square_Article_3",
        adformID: "1920812",
        fluid: false,
        mobileOnly: false,
        refreshedMap: false,
        size: [[300, 250]],
      },
    ],
  },
};
/* -------------------------------------------------------------------------- */
/*                         Definer viewport størrelser                        */
/* -------------------------------------------------------------------------- */
const viewportSizes = {
  mobileMaxWidth: 727,
  tabletMaxWidth: 767,
  desktopMaxWidth: 1280,
};
/* -------------------------------------------------------------------------- */
/*                   Definer brugte kateogrier for artikler                   */
/* -------------------------------------------------------------------------- */
const pageCategories = [
  "/artikler/kategori/nyheder",
  "/artikler/kategori/aktier",
  "/artikler/kategori/skat",
  "/artikler/kategori/budgeter",
  "/artikler/kategori/spare-hacks"
];
/* -------------------------------------------------------------------------- */
/*                   Definer IAB sektioner for forskellige kategorier         */
/* -------------------------------------------------------------------------- */
const iabSektioner = {
  nyheder: "IAB12",
  økonomi: "IAB13-3",
  aktier: "IAB13-11",
  skat: "IAB13-12",
  budgeter: "IAB13-4",
  "spare-hacks": "IAB13",
};
/* -------------------------------------------------------------------------- */
/*                           Definer udelukket indhold                        */
/* -------------------------------------------------------------------------- */
const restrictedWords = [
  { encoded: "c2V4", decoded: "sex" },
  { encoded: "b3JnYXNtZQ==", decoded: "orgasme" },
  { encoded: "cG9ybg==", decoded: "porn" },
  { encoded: "ZXJvdGlr", decoded: "erotik" },
  { encoded: "ZXNjb3J0", decoded: "escort" },
  { encoded: "Ymxvd2pvYg==", decoded: "blowjob" },
  { encoded: "ZGlsZG8=", decoded: "dildo" },
  { encoded: "ZGlsbGVy", decoded: "diller" },
  { encoded: "YnJ5c3Rlcg==", decoded: "bryster" },
  { encoded: "bnVkaXN0", decoded: "nudist" },
  { encoded: "cGVuaXM=", decoded: "penis" },
  { encoded: "c3dpbmdlcg==", decoded: "swinger" },
  { encoded: "b25hbmVyZQ==", decoded: "onanere" },
  { encoded: "cGlr", decoded: "pik" },
  { encoded: "ZGlja3BpY3M=", decoded: "dickpics" },
];
/* -------------------------------------------------------------------------- */
/*                   Definer hvor ads skal placeres på siden                  */
/* -------------------------------------------------------------------------- */
const selectors = {
  paragraphCSS3:
    "div.articleText > :not(:empty):not(h1):not(h2):not(h3):not(h4):not(h5):not(h6):not(p:has(strong))",
  paragraphCSS2: "div.articleText > p",
};
/* -------------------------------------------------------------------------- */
/*                    Initialize pageVariables empty object                   */
/* -------------------------------------------------------------------------- */
const pageVariables = {};
/* -------------------------------------------------------------------------- */
/*                 Indhent viewport størrelse width og height                 */
/* -------------------------------------------------------------------------- */
const viewportWidth = window.innerWidth;
const viewportHeight = window.innerHeight;
/* -------------------------------------------------------------------------- */
/*            Define which device is in use based on viewport width           */
/* -------------------------------------------------------------------------- */
if (viewportWidth > viewportSizes.tabletMaxWidth) {
  deviceInUse = "desktop";
} else if (viewportWidth > viewportSizes.mobileMaxWidth) {
  deviceInUse = "tablet";
} else {
  deviceInUse = "mobile";
}
const isMobile = deviceInUse === "mobile";
const isTablet = deviceInUse === "tablet";
const isDesktop = deviceInUse === "desktop";
console.log("Device in use is", deviceInUse);
// Store device classification in pageVariables
pageVariables["viewport-width"] = viewportWidth;
pageVariables["viewport-height"] = viewportHeight;
pageVariables["deviceClassification"] = deviceInUse;
pageVariables["isMobile"] = isMobile;
pageVariables["isDesktop"] = isDesktop;
console.log("Page device variables collected", pageVariables);
/* -------------------------------------------------------------------------- */
/*         See which browser is being used by the user and classify it        */
/* -------------------------------------------------------------------------- */
const getBrowserName = () => {
  "use strict";
  try {
    const userAgent = navigator.userAgent || navigator.vendor;
    const vendor = navigator.vendor || navigator.userAgent;
    const customWindow = window;

    const browserRules = [
      { name: "Opera", condition: () => (!!customWindow.opr && !!customWindow.addons) || !!customWindow.opera || userAgent.includes("OPR/") },
      { name: "FacebookInApp", condition: () => userAgent.includes("FBAN") || userAgent.includes("FBAV") },
      { name: "Instagram", condition: () => userAgent.includes("Instagram") },
      { name: "Android", condition: () => userAgent.includes("android") },
      { name: "Firefox", condition: () => userAgent.includes("Firefox") },
      { name: "Samsung", condition: () => userAgent.includes("SamsungBrowser") },
      { name: "Safari", condition: () => vendor.includes("Apple") },
      { name: "Edge", condition: () => typeof CSS !== "undefined" && CSS.supports("(-ms-ime-align:auto)") },
      { name: "Chrome", condition: () => vendor.includes("Google") },
    ];

    for (const rule of browserRules) {
      if (rule.condition()) {
        return rule.name;
      }
    }

    // Default to Minor browser
    return "Minor";

  } catch (err) {
    console.error(err, "Failed to detect browser");
    return "Minor";
  }
};
console.log("Browser in use", getBrowserName());
/* -------------------------------------------------------------------------- */
/*    Funktion til at hente og validere den kanoniske URL for aktuelle side   */
/* -------------------------------------------------------------------------- */
const getCanonicalURL = () => {
  const isWebUrlValid = (url) => /^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)$/gm.test(url);

  const canonicalLink = !window.evaluate || !window.XPathResult 
    ? document.querySelector('link[rel~="canonical"]') 
    : document.evaluate("//link[@rel='canonical']", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;

  const canonicalURL = canonicalLink ? canonicalLink.getAttribute("href") : window.location.href;

  return isWebUrlValid(canonicalURL) ? canonicalURL : window.location.href;
};
/* -------------------------------------------------------------------------- */
/*          Funktion til at udtrække base-stien fra den kanoniske URL         */
/* -------------------------------------------------------------------------- */
const extractBasePath = () => {
  const canonicalUrl = new URL(getCanonicalURL());
  let basePath = canonicalUrl.pathname;
  return basePath.length > 1 && basePath.endsWith("/") ? basePath.slice(0, -1) : basePath;
};
// Opdatering af pageVariables med den kanoniske URL og base-sti
pageVariables["canonical-url"] = getCanonicalURL();
pageVariables["pathbasename"] = extractBasePath();

console.log("Canonical URL:", pageVariables["canonical-url"]);
console.log("Path Basename:", pageVariables["pathbasename"]);
/* -------------------------------------------------------------------------- */
/*     Funktion til at bestemme sektionen/kategorien for den aktuelle side    */
/* -------------------------------------------------------------------------- */
const getSubsectionCategory = () => {
  console.assert(pageVariables["pathbasename"], "pageVariables['pathbasename'] not defined before calling getSubsectionCategory()");
  // Debugging logs
  console.log("Path Basename in getSubsectionCategory:", pageVariables["pathbasename"]);

  if (pageVariables["pathbasename"] === "/") {
    console.log("Returning frontpage because pathbasename is /");
    return "frontpage";
  }
  // Hvis stien matcher en kendt sektion, returner "subsection-frontpage"
  if (pageCategories.includes(pageVariables["pathbasename"])) {
    return "subsection-frontpage";
  }
  // Tjek meta-tag for at afgøre om siden er en artikel
  const pageTypeMetaTag = document.querySelector('meta[property~="og:type"]');
  // Returner "articlepage" hvis meta-tag er til stede og angiver "article", ellers "basepage"
  const result = pageTypeMetaTag && pageTypeMetaTag.content === "article" ? "articlepage" : "basepage";
  return result;
};

// Opdatering af pageVariables med den bestemte sektion/kategori
pageVariables["subsection-category"] = getSubsectionCategory();
console.log("Final Subsection Category:", pageVariables["subsection-category"]);
/* -------------------------------------------------------------------------- */
/*    Funktion til at bestemme kategorien baseret på subsection-kategorien    */
/* -------------------------------------------------------------------------- */
const getNewsCategory = () => {
  // Sikrer at "subsection-category" er defineret
  console.assert(pageVariables["subsection-category"] !== undefined, "pageVariables['subsection-category'] not defined before calling getNewsCategory()");
  
  const subsectionCategory = pageVariables["subsection-category"];
  
  const categoryRules = [
    {
      name: "finance",
      condition: () => subsectionCategory === "articlepage" && document.querySelector('meta[property~="article:section"]')?.content.toLowerCase() === "finance"
    },
    {
      name: "finance",
      condition: () => subsectionCategory === "subsection-frontpage"
    },
    {
      name: "economy",
      condition: () => true // Default rule
    }
  ];
  
  for (const rule of categoryRules) {
    if (rule.condition()) {
      return rule.name;
    }
  }
};
// Opdatering af pageVariables med den bestemte nyhedskategori
pageVariables["news-category"] = getNewsCategory();
console.log("News Category:", pageVariables["news-category"]);
/* -------------------------------------------------------------------------- */
/*    Funktion til at bestemme IAB sektionen baseret på nyhedskategorien      */
/* -------------------------------------------------------------------------- */
const getSectionIAB = (section) => {
  "use strict";
  return iabSektioner.hasOwnProperty(section) ? iab[section] : "IAB13";
};
pageVariables["sectioncat"] = getSectionIAB(pageVariables["news-category"]);
console.log("IAB Section:", pageVariables["sectioncat"]);

/* -------------------------------------------------------------------------- */
/*    Funktion til at bestemme miljøet (Live, Test, Specs, NoAds) baseret    */
/*    på URL'en for den aktuelle side                                        */
/* -------------------------------------------------------------------------- */
const getEnvironment = () => {
  console.assert(
    pageVariables["pathbasename"] !== undefined,
    "pageVariables['pathbasename'] not defined before calling getEnvironment()"
  );

  if (pageVariables["404"] === "Yes") {
    return "NoAds";
  } else if (window.location.href.includes("annonce-test")) {
    return "Test";
  } else if (window.location.href.includes("annonce-specs")) {
    return "Specs";
  } else {
    return "Live";
  }
};
pageVariables["environment"] = getEnvironment();

pageVariables["adform-keyvalues"] =
  "category:" +
  pageVariables["news-category"] +
  ",section:" +
  pageVariables["subsection-category"] +
  ",environment:" +
  pageVariables["environment"];

pageVariables["improvedigital-keyvalues"] = {
  sectioncat: [pageVariables["sectioncat"]],
};

console.log("Environment:", pageVariables["environment"]);
console.log("Adform Key Values:", pageVariables["adform-keyvalues"]);
console.log("ImproveDigital Key Values:", pageVariables["improvedigital-keyvalues"]);
console.log("Page Variables collected 33", pageVariables);


/* -------------------------------------------------------------------------- */
/*    Funktion til at bestemme om indholdet er begrænset og derfor ikke må    */
/*    vise reklamer                                                           */
/* -------------------------------------------------------------------------- */
const testIsRestrictedContent = () => {
  "use strict";
  console.assert(
    pageVariables["pathbasename"] !== undefined,
    "pageVariables['pathbasename'] not defined before calling testIsRestrictedContent()"
  );

  if (pageVariables["404"] === "Yes") {
    return "Yes";
  }

  const pathBasenameLower = pageVariables["pathbasename"].toLowerCase();
 // Looper igennem alle ord i restrictedWords
  for (const word of restrictedWords) {
    if (pathBasenameLower.includes(word.decoded)) {
      console.log(`Restricted content detected: ${word.decoded}`);
      return "Yes";
    }
  }
  return "No";
};

pageVariables["restricted"] = testIsRestrictedContent();

googletag = googletag || {};
googletag.cmd = googletag.cmd || [];

console.log("Restricted content:", pageVariables["restricted"]);

googletag.cmd.push(function () {
  "use strict";

  // Create an object to store slot variables
  const adSlots = {};

  function addToAdSlots(ad) {
    adSlots[ad.name] = googletag
      .defineSlot(ad.tag, ad.size, "div-" + ad.name)
      .addService(googletag.pubads());
  }

  if (pageVariables["environment"] !== "noAds") {
    // Loop through all the ads and check the mobileOnly value
    for (const adCategory in adsData.ads) {
      if (adsData.ads.hasOwnProperty(adCategory)) {
        const adList = adsData.ads[adCategory];
        adList.forEach((ad) => {
          if (ad.mobileOnly) {
            if (pageVariables["subsection-category"] === "articlepage") {
              // Define slots and store them in the adSlots object
              addToAdSlots(ad);
            } else {
              addToAdSlots(ad);
              // -> ?????? slot_Mobile_Anchor = googletag.defineOutOfPageSlot(test, googletag.enums.OutofPageFormat.BOTTOM_ANCHOR);
              if (slot_Mobile_Anchor) {
                slot_Mobile_Anchor.addService(googletag.pubads());
              }
            }
          } else {
            if (pageVariables["viewport-width"] > desktopMinViewportWidth) {
              addToAdSlots(ad);
            }

            if (pageVariables["viewport-width"] > 1675) {
              addToAdSlots(ad);
            }

            if (pageVariables["subsection-category"] === "articlepage") {
              addToAdSlots(ad);
            }
          }
        });
      }
    }
  }

  // Log the adSlots object to verify
  console.log(adSlots);
});
